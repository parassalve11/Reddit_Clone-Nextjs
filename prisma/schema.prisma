// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  userName      String?   @unique @db.VarChar(255)
  image         String?

  createdSubreddits Subreddit[]
  accounts          Account[]
  sessions          Session[]
  // Optional for WebAuthn support
  Authenticator     Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Vote      Vote[]
  post      Post[]
}

model Subreddit {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?

  post Post[]
}

model Post {
  id          String  @id @default(uuid())
  tittle      String  @unique
  textContent Json?
  imageString String?

  Vote       Vote[]
  createdtAt DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  Subreddit  Subreddit? @relation(fields: [subName], references: [name])
  subName    String?
  User       User?      @relation(fields: [userId], references: [id])
  userId     String?
}

enum TypeOfVote {
  UP
  DOWN
}

model Vote {
  id String @id @default(uuid())

  Post     Post?      @relation(fields: [postId], references: [id])
  postId   String?
  User     User?      @relation(fields: [userId], references: [id])
  userId   String?
  
  voteType TypeOfVote
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
